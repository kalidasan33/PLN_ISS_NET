@using Kendo.Mvc.UI;
@using Kendo.Mvc.UI.Fluent;
@using KA.Core.Model.BulkOrder;
@using ISS.Common;
@using ISS.Web.Helpers;
@using ISS.Core.Model.Order;
@{
    ViewBag.Title = "Bulk Order";
}


@section scripts{
    @Scripts.Render("~/bundles/review" + ISSGlobals.Version)
}

<script type="text/javascript">
    $(document).ready(function () {
        requisitions.docRequisitionsReady();
        requisitions.const.url = '@Url.Action("action","order")'

        requisitions.const.urlGetvalidateStyle = '@Url.Action("GetValidateStyle", "order",new {area=""})'
        requisitions.const.urlGetAttributeInfo = '@Url.Action("GetAttributeInfo", "order", new { area = "" })'
        requisitions.const.urlGetDcValidate = '@Url.Action("GetDcValidate", "order", new { area = "" })'
        requisitions.const.urlGetSizeInfo = '@Url.Action("GetSizeInfo", "order", new { area = "" })'
        requisitions.const.urlGetStdCaseInfo = '@Url.Action("GetStdCaseInfo", "order", new { area = "" })'
        requisitions.const.urlGetRevisionAndUomInfo = '@Url.Action("GetRevisionAndUomInfo", "order", new { area = "" })'
        requisitions.const.urlGetRetrieve = '@Url.Action("GetRetrieve", "order", new { area = "" })'

        requisitions.const.urlDeleteRequisition = '@Url.Action("DeleteRequisition", "order", new { area = "" })'
        requisitions.const.urlGetDcValidates = '@Url.Action("GetDcValidates", "order", new { area = "" })'
        requisitions.const.urlGetSkuColors = '@Url.Action("GetSkuColors", "order", new { area = "" })'
        requisitions.const.urlGetSizeInfo = '@Url.Action("GetSizeInfo", "order", new { area = "" })'
        requisitions.const.urlvalidateRequisitionDetailRow = '@Url.Action("validateRequisitionDetailRow", "order", new { area = "" })'
        requisitions.const.urlvalidateRequisitionDetail = '@Url.Action("validateRequisitionDetail", "order", new { area = "" })'
        requisitions.const.urlGetDuplicateRecordsBulkSingle = '@Url.Action("GetDuplicateRecordsBulkSingle", "order", new { area = "" })'
        requisitions.const.urlGetSkuSize = '@Url.Action("GetSkuSize", "order", new { area = "" })'
        requisitions.const.urlGetDuplicateRecords = '@Url.Action("GetDuplicateRecords", "order", new { area = "" })'
        requisitions.const.urlGetMFGValidate = '@Url.Action("GetMFGValidate", "order", new { area = "" })'
        requisitions.const.urlCompleteProcess = '@Url.Action("BulkOrderComplete", "BulkOrder", new { area = "ka" })'
        requisitions.const.urlActivateProcess = '@Url.Action("BulkOrderActivate", "BulkOrder", new { area = "ka" })'
        requisitions.const.CreatedBy = '@ViewBag.UserId';
        requisitions.const.CreatedOn = '@DateTime.Now.ToString(LOVConstants.DateFormatDisplay)'


        @if (ViewBag.autoLoad != null && ViewBag.autoLoad)
        {
            <text>
        setTimeout('requisitions.loadRetOrderGrid()', 1000);
        location.hash = 'autoLoad'
        </text>

        }
    });
</script>



@Html.Partial("Title", new KeyValuePair<String, String>("title", ViewBag.Title))



<div class="expand planForm1  form1 width100" id="contentDiv">

    @(Html.Kendo().PanelBar()
        .Name("panelbar-images")
        .Items(panelbar =>
        {
            panelbar.Add().Text("Bulk  Header")
                .Content(@<div>@Html.Partial("Requisition")</div>).Expanded(true);


            panelbar.Add().Text("Bulk  Details")
                   .Content(@<div id="ReqOrderDetails">
                    @Html.Partial("RequisitionDetail", new KA.Core.Model.BulkOrder.BulkOrderDetail())

                @*<div id="RequisitionEditor">@Html.Partial("RequisitionDetailEditor", new RequisitionDetail())</div>*@
                <table class="ttab" width="100%">
                    <tr class="blankrow1"></tr>
                    <tr class="blankrow1"></tr>
                    <tr class="blankrow1"></tr>
                    <tr>
                        @*).Expanded(true);

                              panelbar.Add().Text("Detail")
                            .Content(*@

                        <td>
                            <div class="btnContainer floatRight">

                                <input type="reset" value="Clear" id="btnClearSO" />
                            </div>

                            <div class="btnContainer floatRight">
                                @{bool? resDelete = MenuConfigHelper.IsMenuAuthorised(ConfigConstants.Actions.SOURCED_ORDER);}
                                @if (resDelete.HasValue && resDelete.Value)
                                {
                                    <input type="button" value="Delete" id="btnDelReq" />
                                }
                            </div>


                            <div class="btnContainer floatRight">
                                @{bool? resSave = MenuConfigHelper.IsMenuAuthorised(ConfigConstants.Actions.SO_ADD_SAVE);}
                                @{bool? resUpdate = MenuConfigHelper.IsMenuAuthorised(ConfigConstants.Actions.SO_UPDATE_SAVE);}
                                @if ((resSave.HasValue && resSave.Value) || (resUpdate.HasValue && resUpdate.Value))
                                {
                                    <input type="button" value="Save" id="btnSOSave" />
                                }
                            </div>
                            <div class="btnContainer floatRight">
                                @*@{bool? resSave = MenuConfigHelper.IsMenuAuthorised(ConfigConstants.Actions.SO_ADD_SAVE);}
                                @{bool? resUpdate = MenuConfigHelper.IsMenuAuthorised(ConfigConstants.Actions.SO_UPDATE_SAVE);}
                                @if ((resSave.HasValue && resSave.Value) || (resUpdate.HasValue && resUpdate.Value))
                                {*@
                                    <input type="button" value="Complete" id="btnBulkComplete" /> 
                                    <input type="button" value="Re-Activate" id="btnBulkActivate" />
                                @*}*@
                            </div>
                        </td>
                        <td></td>
                    </tr>
                    <tr class="blankrow1"></tr>
                </table>

                <br />
                <br />
            </div>).Expanded(true);
            bool? resSave1 = MenuConfigHelper.IsMenuAuthorised(ConfigConstants.Actions.SO_ADD_SAVE);
            bool? resUpdate1 = MenuConfigHelper.IsMenuAuthorised(ConfigConstants.Actions.SO_UPDATE_SAVE);
            

        })
    )



</div>


<div class="divVendorSearchPopup" style="display:none;">

    @Html.Partial("~/Views/Order/Partials/_VendorSearch.cshtml", new ISS.Core.Model.Order.VendorSearch())
</div>

<div class="divBulkOrderSearchPopup" style="display:none;">

    @Html.Action("BulkOrderSearch")
</div>


<div class="divRequisitionSearchPopup" style="display:none;">

    @*@Html.Action("RequisitionSearch")*@
</div>

<div class="divRequisitionCommentsPopup" style="display:none;">

    @*@Html.Partial("RequisitionComments")*@
</div>

<div class="divRequisitionExpandPopup" style="display:none;">
    @*@Html.Partial("_RequisitionExpandView")*@
</div>